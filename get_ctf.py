#!/usr/bin/env python3
"""
CTF Writeups to PDF Converter (Playwright version with PDF merging)
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –≤—Å—ñ writeup'–∏ –∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é –≤ PDF —Ñ–∞–π–ª–∏
—Ç–∞ –æ–±'—î–¥–Ω—É—î —ó—Ö –≤ –æ–¥–∏–Ω –≤–µ–ª–∏–∫–∏–π PDF
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path
import tempfile
import markdown
from PIL import Image
import base64
import io
import re
import asyncio
from playwright.async_api import async_playwright

try:
    from PyPDF2 import PdfReader, PdfWriter
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.units import cm
    from reportlab.pdfbase import pdfmetrics
    from reportlab.pdfbase.ttfonts import TTFont

    MERGE_AVAILABLE = True
except ImportError:
    MERGE_AVAILABLE = False


class CTFWriteupConverter:
    def __init__(self, repo_path, output_dir="pdf_writeups"):
        self.repo_path = Path(repo_path)
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.generated_pdfs = []  # –°–ø–∏—Å–æ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö PDF —Ñ–∞–π–ª—ñ–≤

    def find_challenge_folders(self):
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—Å—ñ –ø–∞–ø–∫–∏ –∑ –∑–∞–¥–∞—á–∞–º–∏ (—è–∫—ñ –º—ñ—Å—Ç—è—Ç—å README.md)"""
        challenges = []

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —à–ª—è—Ö –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ forensics)
        if self.repo_path.name in ['forensics', 'crypto', 'web', 'pwn', 'reverse', 'misc', 'hardware']:
            # –¶–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è, —à—É–∫–∞—î–º–æ –∑–∞–¥–∞—á—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –Ω—ñ–π
            category_name = self.repo_path.name
            for challenge_path in self.repo_path.iterdir():
                if challenge_path.is_dir() and not challenge_path.name.startswith('.'):
                    readme_path = challenge_path / "README.md"
                    if readme_path.exists():
                        challenges.append({
                            'category': category_name,
                            'name': challenge_path.name,
                            'path': challenge_path,
                            'readme': readme_path
                        })
        else:
            # –¶–µ –∫–æ—Ä–µ–Ω–µ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π, —à—É–∫–∞—î–º–æ —É –≤—Å—ñ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
            for category_path in self.repo_path.iterdir():
                if category_path.is_dir() and not category_path.name.startswith('.'):
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—ñ–¥–ø–∞–ø–∫–∏ –∑ –∑–∞–¥–∞—á–∞–º–∏
                    for challenge_path in category_path.iterdir():
                        if challenge_path.is_dir():
                            readme_path = challenge_path / "README.md"
                            if readme_path.exists():
                                challenges.append({
                                    'category': category_path.name,
                                    'name': challenge_path.name,
                                    'path': challenge_path,
                                    'readme': readme_path
                                })

        return challenges

    def process_images_in_markdown(self, markdown_content, assets_dir):
        """–û–±—Ä–æ–±–ª—è—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ markdown, –∫–æ–Ω–≤–µ—Ä—Ç—É—î —ó—Ö –≤ base64"""
        if not assets_dir.exists():
            return markdown_content

        def replace_image(match):
            alt_text = match.group(1) if match.group(1) else ""
            img_path = match.group(2)

            print(f"üîç –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {img_path}")

            # –í–∞—Ä—ñ–∞–Ω—Ç–∏ —à–ª—è—Ö—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            possible_paths = []

            # 1. –Ø–∫—â–æ —Ü–µ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ assets
            if img_path.startswith('assets/') or img_path.startswith('./assets/'):
                img_name = img_path.split('/')[-1]
                possible_paths.append(assets_dir / img_name)

            # 2. –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É (–±–µ–∑ –ø–∞–ø–∫–∏)
            elif '/' not in img_path:
                possible_paths.append(assets_dir / img_path)

            # 3. –Ø–∫—â–æ —Ü–µ –ø–æ–≤–Ω–∏–π –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö
            else:
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
                img_name = img_path.split('/')[-1]
                possible_paths.append(assets_dir / img_name)

                # –¢–∞–∫–æ–∂ —Å–ø—Ä–æ–±—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–∞–ø–∫–∏ –∑–∞–¥–∞—á—ñ
                challenge_path = assets_dir.parent
                possible_paths.append(challenge_path / img_path)

            # –®—É–∫–∞—î–º–æ —Ñ–∞–π–ª —É –≤—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –º—ñ—Å—Ü—è—Ö
            for full_img_path in possible_paths:
                if full_img_path.exists():
                    try:
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {full_img_path}")

                        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64
                        with open(full_img_path, 'rb') as img_file:
                            img_data = img_file.read()

                        # –í–∏–∑–Ω–∞—á–∞—î–º–æ MIME —Ç–∏–ø
                        ext = full_img_path.suffix.lower()
                        mime_types = {
                            '.png': 'image/png',
                            '.jpg': 'image/jpeg',
                            '.jpeg': 'image/jpeg',
                            '.gif': 'image/gif',
                            '.svg': 'image/svg+xml',
                            '.webp': 'image/webp'
                        }
                        mime_type = mime_types.get(ext, 'image/png')

                        # –°—Ç–≤–æ—Ä—é—î–º–æ base64 data URL
                        base64_data = base64.b64encode(img_data).decode('utf-8')
                        return f'![{alt_text}](data:{mime_type};base64,{base64_data})'

                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {full_img_path}: {e}")
                        continue

            print(f"‚ö†Ô∏è  –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {img_path}")
            return match.group(0)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ markdown –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        img_pattern = r'!\[([^\]]*)\]\(([^)]+)\)'
        processed_content = re.sub(img_pattern, replace_image, markdown_content)

        return processed_content

    def markdown_to_html(self, markdown_content):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î markdown –≤ HTML –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É –∫–æ–¥—É"""
        md = markdown.Markdown(extensions=[
            'codehilite',
            'fenced_code',
            'tables',
            'toc'
        ])

        html_content = md.convert(markdown_content)

        # –î–æ–¥–∞—î–º–æ CSS —Å—Ç–∏–ª—ñ –¥–ª—è –≥–∞—Ä–Ω–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        css_styles = """
        <style>
        @page {
            size: A4;
            margin: 2cm;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            font-size: 14px;
        }

        h1, h2, h3, h4, h5, h6 {
            color: #2c3e50;
            margin-top: 2em;
            margin-bottom: 1em;
            page-break-after: avoid;
        }

        h1 {
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
            font-size: 28px;
        }

        h2 {
            border-bottom: 2px solid #ecf0f1;
            padding-bottom: 5px;
            font-size: 22px;
        }

        h3 {
            font-size: 18px;
        }

        code {
            background-color: #f8f9fa;
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 12px;
            color: #e74c3c;
        }

        pre {
            background-color: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            margin: 1em 0;
            page-break-inside: avoid;
        }

        pre code {
            background-color: transparent;
            color: inherit;
            padding: 0;
            font-size: 11px;
        }

        img {
            max-width: 100%;
            height: auto;
            margin: 10px 0;
            border-radius: 5px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            page-break-inside: avoid;
        }

        table {
            border-collapse: collapse;
            width: 100%;
            margin: 1em 0;
            page-break-inside: avoid;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
            font-size: 12px;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }

        blockquote {
            border-left: 4px solid #3498db;
            margin: 1em 0;
            padding-left: 1em;
            color: #7f8c8d;
        }

        .challenge-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
            page-break-after: avoid;
        }

        .challenge-category {
            font-size: 0.9em;
            opacity: 0.8;
            margin-bottom: 5px;
        }
        </style>
        """

        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>CTF Writeup</title>
            {css_styles}
        </head>
        <body>
            {html_content}
        </body>
        </html>
        """

    async def convert_to_pdf(self, challenge, browser):
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î –æ–¥–∏–Ω writeup –≤ PDF"""
        try:
            print(f"–û–±—Ä–æ–±–ª—è—é: {challenge['category']} - {challenge['name']}")

            # –ß–∏—Ç–∞—î–º–æ markdown —Ñ–∞–π–ª
            with open(challenge['readme'], 'r', encoding='utf-8') as f:
                markdown_content = f.read()

            # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∑–∞–¥–∞—á—É
            header = f"""# {challenge['name']}

**–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:** {challenge['category']}

---

"""
            markdown_content = header + markdown_content

            # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            assets_dir = challenge['path'] / 'assets'
            processed_markdown = self.process_images_in_markdown(markdown_content, assets_dir)

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ HTML
            html_content = self.markdown_to_html(processed_markdown)

            # –°—Ç–≤–æ—Ä—é—î–º–æ PDF
            output_filename = f"{challenge['category']}_{challenge['name'].replace(' ', '_')}.pdf"
            output_path = self.output_dir / output_filename

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π HTML —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
                f.write(html_content)
                temp_html_path = f.name

            try:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
                page = await browser.new_page()

                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ HTML
                await page.goto(f'file://{temp_html_path}')

                # –ì–µ–Ω–µ—Ä—É—î–º–æ PDF
                await page.pdf(
                    path=str(output_path),
                    format='A4',
                    margin={
                        'top': '2cm',
                        'right': '2cm',
                        'bottom': '2cm',
                        'left': '2cm'
                    },
                    print_background=True
                )

                await page.close()

            finally:
                # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
                os.unlink(temp_html_path)

            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ: {output_path}")
            self.generated_pdfs.append(output_path)  # –î–æ–¥–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ {challenge['name']}: {e}")
            return False

    async def create_index_pdf(self, challenges, browser):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–¥–µ–∫—Å–Ω–∏–π PDF –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º –≤—Å—ñ—Ö –∑–∞–¥–∞—á"""
        index_content = """# CTF Writeups Collection

## –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á

"""

        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º
        categories = {}
        for challenge in challenges:
            category = challenge['category']
            if category not in categories:
                categories[category] = []
            categories[category].append(challenge['name'])

        for category, names in sorted(categories.items()):
            index_content += f"\n### {category.upper()}\n\n"
            for name in sorted(names):
                index_content += f"- {name}\n"

        index_content += f"\n\n**–í—Å—å–æ–≥–æ –∑–∞–¥–∞—á:** {len(challenges)}\n"
        index_content += f"**–ö–∞—Ç–µ–≥–æ—Ä—ñ–π:** {len(categories)}\n\n"
        index_content += "---\n\n*–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ*"

        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ PDF
        html_content = self.markdown_to_html(index_content)
        output_path = self.output_dir / "_INDEX.pdf"

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π HTML —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w', suffix='.html', delete=False, encoding='utf-8') as f:
            f.write(html_content)
            temp_html_path = f.name

        try:
            page = await browser.new_page()
            await page.goto(f'file://{temp_html_path}')
            await page.pdf(
                path=str(output_path),
                format='A4',
                margin={'top': '2cm', 'right': '2cm', 'bottom': '2cm', 'left': '2cm'},
                print_background=True
            )
            await page.close()
        finally:
            os.unlink(temp_html_path)

        print(f"üìã –°—Ç–≤–æ—Ä–µ–Ω–æ —ñ–Ω–¥–µ–∫—Å: {output_path}")
        self.generated_pdfs.append(output_path)  # –î–æ–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–æ —Å–ø–∏—Å–∫—É

    def create_separator_page(self, title, output_path):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É-—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –º—ñ–∂ PDF —Ñ–∞–π–ª–∞–º–∏"""
        if not MERGE_AVAILABLE:
            return None

        try:
            c = canvas.Canvas(str(output_path), pagesize=A4)
            width, height = A4

            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω
            c.setFillColorRGB(0.2, 0.3, 0.5)  # –¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π —Ñ–æ–Ω
            c.rect(0, 0, width, height, fill=True)

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            c.setFillColorRGB(1, 1, 1)  # –ë—ñ–ª–∏–π —Ç–µ–∫—Å—Ç
            c.setFont("Helvetica-Bold", 24)
            text_width = c.stringWidth(title, "Helvetica-Bold", 24)
            c.drawString((width - text_width) / 2, height / 2, title)

            # –õ—ñ–Ω—ñ—è –ø—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            c.setStrokeColorRGB(1, 1, 1)
            c.setLineWidth(2)
            line_start = (width - text_width) / 2
            line_end = line_start + text_width
            c.line(line_start, height / 2 - 10, line_end, height / 2 - 10)

            c.save()
            return output_path
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏-—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫–∞: {e}")
            return None

    def merge_pdfs(self):
        """–û–±'—î–¥–Ω—É—î –≤—Å—ñ PDF —Ñ–∞–π–ª–∏ –≤ –æ–¥–∏–Ω"""
        if not MERGE_AVAILABLE:
            print("‚ö†Ô∏è  PyPDF2 —Ç–∞ reportlab –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è PDF:")
            print("pip install PyPDF2 reportlab")
            return False

        if not self.generated_pdfs:
            print("‚ùå –ù–µ–º–∞—î PDF —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è")
            return False

        try:
            print("\nüîó –ü–æ—á–∏–Ω–∞—é –æ–±'—î–¥–Ω–∞–Ω–Ω—è PDF —Ñ–∞–π–ª—ñ–≤...")

            writer = PdfWriter()
            merged_path = self.output_dir / "ALL_WRITEUPS_MERGED.pdf"

            # –°–æ—Ä—Ç—É—î–º–æ PDF —Ñ–∞–π–ª–∏ (—ñ–Ω–¥–µ–∫—Å —Å–ø–æ—á–∞—Ç–∫—É, –ø–æ—Ç—ñ–º –ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É)
            sorted_pdfs = sorted(self.generated_pdfs, key=lambda x: (
                0 if x.name == "_INDEX.pdf" else 1,
                x.name
            ))

            for pdf_path in sorted_pdfs:
                if not pdf_path.exists():
                    continue

                try:
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É-—Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
                    separator_name = pdf_path.stem.replace('_', ' ').title()
                    if pdf_path.name == "_INDEX.pdf":
                        separator_name = "üìã –Ü–ù–î–ï–ö–°"
                    else:
                        separator_name = f"üìÑ {separator_name}"

                    temp_separator = self.output_dir / f"temp_separator_{pdf_path.stem}.pdf"
                    separator_path = self.create_separator_page(separator_name, temp_separator)

                    # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫
                    if separator_path and separator_path.exists():
                        with open(separator_path, 'rb') as sep_file:
                            sep_reader = PdfReader(sep_file)
                            for page in sep_reader.pages:
                                writer.add_page(page)
                        os.unlink(separator_path)  # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª

                    # –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π PDF
                    with open(pdf_path, 'rb') as pdf_file:
                        reader = PdfReader(pdf_file)
                        for page_num, page in enumerate(reader.pages):
                            writer.add_page(page)

                    print(f"‚úÖ –î–æ–¥–∞–Ω–æ: {pdf_path.name}")

                except Exception as e:
                    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ {pdf_path.name}: {e}")
                    continue

            # –ó–∞–ø–∏—Å—É—î–º–æ –æ–±'—î–¥–Ω–∞–Ω–∏–π PDF
            with open(merged_path, 'wb') as output_file:
                writer.write(output_file)

            print(f"\nüéâ –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –æ–±'—î–¥–Ω–∞–Ω–∏–π PDF: {merged_path}")
            print(f"üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫: {len(writer.pages)}")
            return True

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±'—î–¥–Ω–∞–Ω–Ω—ñ PDF: {e}")
            return False

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É"""
        print("üöÄ –ü–æ—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é CTF writeups...")

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞–¥–∞—á—ñ
        challenges = self.find_challenge_folders()

        if not challenges:
            print("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –∑–∞–¥–∞—á—ñ –∑ README.md")
            return

        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(challenges)} –∑–∞–¥–∞—á:")
        for challenge in challenges:
            print(f"  - {challenge['category']}/{challenge['name']}")

        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –≤: {self.output_dir.absolute()}")

        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä
        async with async_playwright() as p:
            browser = await p.chromium.launch()

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–¥–µ–∫—Å
            await self.create_index_pdf(challenges, browser)

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–∂–Ω—É –∑–∞–¥–∞—á—É
            success_count = 0
            for challenge in challenges:
                if await self.convert_to_pdf(challenge, browser):
                    success_count += 1

            await browser.close()

        print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—é! –£—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ: {success_count}/{len(challenges)} –∑–∞–¥–∞—á")

        # –û–±'—î–¥–Ω—É—î–º–æ PDF —Ñ–∞–π–ª–∏
        if self.generated_pdfs:
            self.merge_pdfs()

        print(f"\nüìÅ –í—Å—ñ —Ñ–∞–π–ª–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤: {self.output_dir.absolute()}")
        print(f"üìã –Ü–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ PDF: {len(self.generated_pdfs)} —Ñ–∞–π–ª—ñ–≤")
        merged_file = self.output_dir / "ALL_WRITEUPS_MERGED.pdf"
        if merged_file.exists():
            print(f"üîó –û–±'—î–¥–Ω–∞–Ω–∏–π PDF: {merged_file.name}")


def check_dependencies():
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫"""
    dependencies = [
        ('playwright', 'playwright'),
        ('markdown', 'markdown'),
        ('PIL', 'Pillow')
    ]

    optional_dependencies = [
        ('PyPDF2', 'PyPDF2'),
        ('reportlab', 'reportlab')
    ]

    missing_packages = []
    missing_optional = []

    for import_name, package_name in dependencies:
        try:
            __import__(import_name)
        except ImportError:
            missing_packages.append(package_name)

    for import_name, package_name in optional_dependencies:
        try:
            __import__(import_name)
        except ImportError:
            missing_optional.append(package_name)

    if missing_packages:
        print("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–∞–∫–µ—Ç–∏:")
        for package in missing_packages:
            print(f"  - {package}")
        print("\n–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö –∫–æ–º–∞–Ω–¥–∞–º–∏:")
        print(f"pip install {' '.join(missing_packages)}")
        if 'playwright' in missing_packages:
            print("playwright install")
        return False

    if missing_optional:
        print("‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–∞–∫–µ—Ç–∏ (–¥–ª—è –æ–±'—î–¥–Ω–∞–Ω–Ω—è PDF):")
        for package in missing_optional:
            print(f"  - {package}")
        print(f"–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —ó—Ö: pip install {' '.join(missing_optional)}")
        print("–ë–µ–∑ –Ω–∏—Ö —Å–∫—Ä–∏–ø—Ç –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ, –∞–ª–µ –Ω–µ –∑–º–æ–∂–µ –æ–±'—î–¥–Ω—É–≤–∞—Ç–∏ PDF\n")

    return True


async def main():
    if len(sys.argv) < 3:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print("python3 main.py <—à–ª—è—Ö_–¥–æ_—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é> <–ø–∞–ø–∫–∞_–¥–ª—è_PDF>")
        print("\n–ü—Ä–∏–∫–ª–∞–¥–∏:")
        print("python3 main.py /Users/serhiitsybulnik/cyber-apocalypse-2025/forensics/ writeups_1")
        print("python3 main.py /Users/serhiitsybulnik/business-ctf-2025/forensics my_writeups")
        sys.exit(1)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    if not check_dependencies():
        sys.exit(1)

    repo_path = sys.argv[1]
    output_dir = sys.argv[2]

    if not os.path.exists(repo_path):
        print(f"‚ùå –®–ª—è—Ö –Ω–µ —ñ—Å–Ω—É—î: {repo_path}")
        sys.exit(1)

    print(f"üìÇ –í—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞: {repo_path}")
    print(f"üìÅ –í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞: {output_dir}")

    converter = CTFWriteupConverter(repo_path, output_dir)
    await converter.run()


if __name__ == "__main__":
    asyncio.run(main())
